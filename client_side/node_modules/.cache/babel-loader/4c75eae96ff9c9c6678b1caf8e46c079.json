{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paige\\\\Downloads\\\\banking_system\\\\client_side\\\\src\\\\components\\\\makeTransaction\\\\makeTransaction.js\";\nimport React, { Component } from 'react';\nimport { Button, Container, Row, Col, Form, InputGroup } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Routes, useParams, useNavigate } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './makeTransaction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function performTransactions(details) {\n  return fetch('http://localhost:3000/users/performTransactions/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(details)\n  }).then(data => data.json());\n}\n\nfunction withParams(Component) {\n  var _s = $RefreshSig$();\n\n  return _s(props => {\n    _s();\n\n    return /*#__PURE__*/_jsxDEV(Component, { ...props,\n      params: useParams(),\n      navigate: useNavigate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }, this);\n  }, \"4sf3IBtgL+05Ao0dH7BVF7jqFNw=\", false, function () {\n    return [useParams, useNavigate];\n  });\n}\n\nclass MakeTransaction extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: [],\n      account: []\n    };\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    const transaction = await submitApplication({\n      id: this.state.user_id,\n      transactAmount: this.state.transactAmount,\n      fromAccount: this.state.fromAccount,\n      toAccount: this.state.toAccount\n    });\n    alert(\"Application Entered Successfully\");\n    console.log(transaction);\n    this.props.navigate(\"/users/\" + localStorage.getItem(\"user\"));\n  }\n\n  componentDidMount() {\n    let {\n      id\n    } = this.props.params;\n    id = localStorage.getItem(\"user\");\n    const urls = ['http://localhost:3000/users/logged/' + id, 'http://localhost:3000/users/account/' + id];\n    let requests = urls.map(url => fetch(url));\n    Promise.all(requests).then(responses => {\n      return Promise.all(responses.map(response => response.json()));\n    }).then(responses => {\n      this.setState({\n        user: responses[0],\n        account: responses[1]\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      style: {\n        fontcolor: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"mh-100\",\n          md: true,\n          lg: \"12\",\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: this.state.user.map(user => /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\" New Transaction for User #: \", localStorage.getItem(\"user\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              className: \"mh-100\",\n              md: true,\n              lg: \"6\",\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Transaction Amount:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                    children: \"$\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    \"aria-label\": \"Amount (to the nearest dollar)\",\n                    onChange: e => this.setState({\n                      transactAmount: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                    children: \".00\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"From Account #:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                  \"aria-label\": \"Select Type\",\n                  onChange: e => this.setState({\n                    fromAccount: e.target.value\n                  }),\n                  children: this.state.account.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: account.account_id,\n                    children: account.account_id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"To Account #:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                  \"aria-label\": \"Select Type\",\n                  onChange: e => this.setState({\n                    toAccount: e.target.value\n                  }),\n                  children: this.state.account.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: account.account_id,\n                    children: account.account_id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 49\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"dark\",\n            onClick: this.handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default _c = withParams(MakeTransaction);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","Button","Container","Row","Col","Form","InputGroup","BrowserRouter","Router","Route","Routes","useParams","useNavigate","styles","performTransactions","details","fetch","method","headers","body","JSON","stringify","then","data","json","withParams","props","MakeTransaction","constructor","state","user","account","handleSubmit","e","preventDefault","transaction","submitApplication","id","user_id","transactAmount","fromAccount","toAccount","alert","console","log","navigate","localStorage","getItem","componentDidMount","params","urls","requests","map","url","Promise","all","responses","response","setState","render","fontcolor","target","value","account_id"],"sources":["C:/Users/paige/Downloads/banking_system/client_side/src/components/makeTransaction/makeTransaction.js"],"sourcesContent":["import React, {Component} from 'react'\nimport {Button , Container, Row, Col, Form, InputGroup} from 'react-bootstrap'\nimport { BrowserRouter as Router, Route, Routes, useParams, useNavigate} from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport styles from './makeTransaction.css';\n\n\nasync function performTransactions(details) {\n    return fetch('http://localhost:3000/users/performTransactions/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(details)\n        })\n        .then(data => data.json())\n    }\n\n\n\n\nfunction withParams(Component) {\n    return props => <Component {...props} params={useParams()} navigate={useNavigate()}/>;\n  }\n\nclass MakeTransaction extends Component {  \n    constructor(){\n\n        super();\n        this.state = {\n            user:[],\n            account: [],\n            \n        }\n    }\n\n    async handleSubmit(e){\n        e.preventDefault()\n        \n        const transaction = await submitApplication({\n            id: this.state.user_id, transactAmount: this.state.transactAmount, fromAccount: this.state.fromAccount, toAccount: this.state.toAccount\n        });\n        alert(\"Application Entered Successfully\");\n        console.log(transaction)\n        this.props.navigate(\"/users/\" + localStorage.getItem(\"user\"));\n                \n    }\n\n    componentDidMount(){\n\n        let { id } = this.props.params;\n        id = localStorage.getItem(\"user\");\n\n        const urls = [\n            'http://localhost:3000/users/logged/'+id,\n            'http://localhost:3000/users/account/'+id\n            \n        ]\n        let requests = urls.map((url) => fetch(url));\n\n        Promise.all(requests)\n            .then((responses) => {\n                return Promise.all(responses.map((response) => response.json()));\n            })\n            .then((responses) => {\n                this.setState({\n                    user : responses[0],\n                    account : responses[1],\n                    \n                });\n            });\n    \n    }\n\n    \n\n    render (){\n\n\n        return (\n                <Container fluid style={{ fontcolor: 'black' }}>\n                    <Row >\n                        <Col className=\"mh-100\" md lg=\"12\">\n                            <Row>\n                                {this.state.user.map(user =>\n                                    <h2> New Transaction for User #: {localStorage.getItem(\"user\")}</h2>\n                                )}\n                            </Row>\n                            <Row>\n                                <Col className=\"mh-100\" md lg=\"6\">\n                                    <Row>\n                                        <h5>Transaction Amount:</h5>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Text>$</InputGroup.Text>\n                                            <Form.Control aria-label=\"Amount (to the nearest dollar)\" \n                                                onChange={e => this.setState({ transactAmount: e.target.value })}\n                                            />\n                                            <InputGroup.Text>.00</InputGroup.Text>\n                                        </InputGroup>\n                                    </Row>\n                                    <Row>\n                                        <h5>From Account #:</h5>\n                                        <Form.Select aria-label=\"Select Type\"\n                                            onChange={e => this.setState({ fromAccount: e.target.value })}\n                                        >\n                                            {this.state.account.map(account =>\n                                                <option value={account.account_id}>{account.account_id}</option>\n\n                                            )}\n                                        </Form.Select>\n                                    </Row>\n                                    <Row>\n                                        <h1> </h1>\n                                    </Row>\n                                    <Row>\n                                        <h5>To Account #:</h5>\n                                        <Form.Select \n                                            aria-label=\"Select Type\"\n                                            onChange={(e) => this.setState({toAccount: e.target.value})}\n                                        >\n                                            {this.state.account.map(account =>\n                                                <option value={account.account_id}>{account.account_id}</option>\n\n                                            )}\n                                        </Form.Select>\n                                    </Row>\n                                    <Row>\n                                        <h5> </h5>\n                                    </Row>\n                                \n                                </Col>\n                            </Row>\n                            <Button variant=\"dark\"\n                                onClick={this.handleSubmit}\n                            >\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n        );\n    }  \n}\n\nexport default withParams(MakeTransaction);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}